#!/usr/bin/env python
#
# Copyright 2013 Corneliu Prodescu <cprodescu@gmail.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#
# Download ipfix.xml from [1] and remove default namespace declaration,
# then run this to generate ipfix-constants.[c|h].
#
# [1] http://www.iana.org/assignments/ipfix/ipfix.xml
#

ie2types = {}
ietypes = []

# load ipfix XML and parse
from lxml import etree
ipfix_xml = etree.parse("ipfix.xml")
root = ipfix_xml.getroot()
records = root.xpath('//record')
for record in records:
    rec_names = record.xpath('./name')
    rec_types = record.xpath('./dataType')
    if len(rec_names) == 1 and len(rec_types) == 1:
        rec_name = rec_names[0].text.strip()
        rec_type = rec_types[0].text.strip()
        ie2types[rec_name] = rec_type

for ietype in ie2types.itervalues():
    if ietype not in ietypes:
        ietypes += [ietype]

# generate header and source files
from sys import argv
preamble = """
/*
 * This file was automatically generated by %s
 * DO NOT CHANGE!
 */

"""%argv[0]

header = open("ipfix-constants.h", "w")
header.write(preamble)
header.write("""
#ifndef f_engine_ipfix_constants_h
#define f_engine_ipfix_constants_h

""")
header.write('#define MAX_IPFIX_IES     %d\n' % len(ie2types))
header.write("""
enum ipfix_ie_type {
    IETYPE_UNKNOWN,
""")
for ietype in ietypes:
    header.write('    IETYPE_%s,\n' % ietype.upper())

header.write("""};
""")
header.write("""
enum ipfix_ie_type
get_ipfix_type(const char *ie_name);
""")
header.write("""
#endif // ! f_engine_ipfix_constants_h
""")

source = open("ipfix-constants.c", "w")
source.write(preamble)
source.write("""

#include <string.h>

#include \"ipfix-constants.h\"

enum ipfix_ie_type
get_ipfix_type(const char* ie_name) {
""")
for ie_name in ie2types:
    source.write("""
    if (strcmp(ie_name, \"%s\") == 0)
        return IETYPE_%s;
""" % (ie_name, ie2types[ie_name].upper()))
source.write("""
    return IETYPE_UNKNOWN;
""")
source.write("""}
""")
