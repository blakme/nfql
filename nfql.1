.TH man 1 "24 December 2013" ".1" "Man Page Example"
.SH NAME
nfql \- An implementation of the network flow query language (NFQL)
.SH SYNOPSIS
.BR nfql " [" \-DIhV "] [" "\-d dirpath" "] [" "\-v vlevel" "] [" "\-z zlevel"] " queryfile tracefile "

.SH DESCRIPTION
.I nfql
is a reference implementation of NFQL.  nfql is composed of an execution
engine and a query parser. The execution engine is the brain of nfql where the
flows are processed. nfql reads a flow-query in an intermediate JSON format
alongwith tracefiles that are read in memory for efficient processing. The
query parser can be used to read a custom query domain specific language (DSL)
and generate the JSON intermediate representation required by the execution
engine.

.PP
A common usage is shown below:
.PP
$ nfql examples/query-tcp-session.json examples/trace-2009.ftz
.br
$ flow-cat tracefile[s] | nfql examples/query-tcp-session.json -
.br
$ nfql -I examples/query-tcp-session.json examples/trace-2009.ipfix
.SH OPTIONS
.TP
.B -D,--debug
Prints the nfql output with maximum verbosity level. This is equivalent to
.BI --verbose=3
level. Please also see
.BI -v,--verbose.
.TP
.B -I,--ipfix
Reads the supplied tracefile in the IPFIX file format as defined in RFC 5655.
If this argument is not supplied, the default trace file format is assumed.
The default trace file format is the flow-tools NetFlow v5 format.
.TP
.B -h,--help
Prints a condensed usage help and exits.
.TP
.B -V,--version
Prints the current version and exits.
.TP
.BI \-d,--dirpath " dirpath"
The
.BI --dirpath
switch allows the user to provide a directory path where the results can be
written to. Each stream is stored as its own file with an ID to disambiguate
it. Results from each stage of the pipeline can also be written to separate
files with the increase in the verbosity level. In fact, 
.BI --dirpath
and
.BI --verbose
work well together to adjust the level at which the writes are to be made.
Such a feature allows one to blackbox each stageâ€™s functionality and analyze
it independently, which can be useful not only for unit testing but also for
performance evaluations purposes. Please also see
.BI -v,--verbose.
.TP
.BI \-v,--verbose " vlevel"
The amount of output generated can be tweaked using a number of verbosity
levels. In its default state, nfql only outputs the resultant streams (A
stream is a collection of flow-records of a group unfolded by the ungrouper)
of flow records. At
.BI --verbose=3
level, nfql in addition to echoing
the flow (or group) records resulting from each stage, also echoes the results
of each intermediate stage alongwith the original trace that was passed as
input.
With
.BI --verbose=2,
the echo of the original trace is pruned, while intermediate
results get pruned with 
.BI --verbose=1.
.TP
.BI \-z,--zlevel " zlevel"
nfql uses the zlib software library to compress and write NetFlow v5 results
in flow-tools files. zlib supports 9 levels with 9 being the highest
compression level.
.BI --zlevel
allows the user to supply its desired choice of the compression level.  A
default level of 5 is used for writes if the switch is not supplied during
runtime. Each compression level adds its own performance overhead and must be
used with discretion.

.SH SEE ALSO
RFC 5655
.SH LIMITATIONS
The JSON representation need not be manually generated by the user.  A NFQL
parser must read, syntactically check and parse the query DSL to generate an
equivalent JSON representation. Currently we are missing such a parser module.
For now, we provide custom Python scripts that can generate JSON
representations.  A new query and its corresponding unit test can be prepared
by adapting to one of the respective example/ and tests/ scripts provided in
the package.
.SH BUGS
Likely, but we will try to fix them if we can reproduce them.
.SH AUTHOR
Vaibhav Bajpai <contact@vaibhavbajpai.com>
.br
Johannes Schauer <j.schauer@email.de>
.br
Corneliu Claudiu Prodescu <c.prodescu@jacobs-university.de>
.br
Juergen Schoenwaelder <j.schoenwaelder@jacobs-university.de>
